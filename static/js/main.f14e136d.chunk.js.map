{"version":3,"sources":["DashboardTable.js","AssigneePanelBar.js","Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["parseDate","formattedDate","Date","toDateString","diffHours","dt1","dt2","diff","getTime","Math","abs","round","DashboardTable","props","claimsAssigned","claimsData","assigneeSelected","assigneeClaims","assignee","claims","forEach","claim","assignedTo","push","getSlaBasedOnStatus","slaExceeded","status","updatedAt","length","sort","claimA","claimB","ClaimASla","ClaimBSla","selectClaimsBasedOnAssignee","Table","striped","map","scope","id","claimant","createdAt","badgeColor","claimStatus","Badge","color","claimsBadge","AssigneePanelBar","assignees","Set","add","ListGroup","Array","from","ListGroupItem","tag","action","onClick","Dashboard","handleAssigneeSelect","bind","state","console","log","this","setState","className","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f14e136d.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\nimport {Badge, Table,} from \"reactstrap\";\n\nfunction DashboardTable(props) {\n    let claimsAssigned = selectClaimsBasedOnAssignee(props.claimsData, props.assigneeSelected);\n    return (\n        <div>\n            <h6>Claims Dashboard</h6>\n            <Table striped>\n                <thead>\n                <tr>\n                    <th>Claim ID</th>\n                    <th>Assignee</th>\n                    <th>Claimant</th>\n                    <th>Created</th>\n                    <th>Last updated</th>\n                    <th>Status</th>\n                </tr>\n                </thead>\n                <tbody>\n                {\n                    claimsAssigned?.map(claim =>\n                        <tr>\n                            <th scope=\"row\">{claim.id}</th>\n                            <td>{claim.assignedTo}</td>\n                            <td>{claim.claimant}</td>\n                            <td>{parseDate(claim.createdAt)}</td>\n                            <td>{parseDate(claim.updatedAt)}</td>\n                            <td>{claimsBadge(claim.status)}</td>\n                        </tr>)\n                }\n                </tbody>\n            </Table>\n        </div>\n    );\n}\n\nfunction selectClaimsBasedOnAssignee(claimsData, assigneeSelected) {\n    let assigneeClaims = [];\n    if(assigneeSelected.assignee === 'All'){\n        assigneeClaims = claimsData.claims;\n    } else {\n        claimsData.claims.forEach(\n            claim => {\n                if (claim.assignedTo === assigneeSelected.assignee) {\n                    assigneeClaims.push(claim);\n                }\n            }\n        )\n    }\n\n    function getSlaBasedOnStatus(claim) {\n        let slaExceeded = 0;\n        switch (claim.status) {\n            case 'received' : {\n                slaExceeded = diffHours(new Date(claim.updatedAt), new Date()) - 48;\n                break\n            }\n            case 'awaiting_action' : {\n                slaExceeded = diffHours(new Date(claim.updatedAt), new Date()) - 72;\n                break\n            }\n            case 'rejected' : {\n                break\n            }\n        }\n        return slaExceeded;\n    }\n\n    function compareClaims(claimA, claimB) {\n        let ClaimASla = getSlaBasedOnStatus(claimA);\n        let ClaimBSla = getSlaBasedOnStatus(claimB);\n        if ( ClaimASla < ClaimBSla ){\n            return 1;\n        }\n        if ( ClaimASla > ClaimBSla ){\n            return -1;\n        }\n        return 0;\n    }\n\n    return (assigneeClaims.length > 0 ? assigneeClaims : claimsData.claims).sort(compareClaims);\n}\n\nfunction claimsBadge(status) {\n    let badgeColor = \"green\"\n    let claimStatus = \"New\"\n    switch (status) {\n        case 'received' : {\n            badgeColor = \"primary\"\n            claimStatus = \"Received\"\n            break\n        }\n        case 'awaiting_action' : {\n            badgeColor = \"warning\"\n            claimStatus = \"Awaiting\"\n            break\n        }\n        case 'rejected' : {\n            badgeColor = \"danger\"\n            claimStatus = \"Rejected\"\n            break\n        }\n    }\n    return (\n        <Badge color={badgeColor}>{claimStatus}</Badge>\n    );\n\n\n}\n\nfunction parseDate(formattedDate) {\n    let dateProvided = new Date(formattedDate);\n    return dateProvided.toDateString();\n}\n\nfunction diffHours(dt1, dt2)\n{\n\n    var diff =(dt2.getTime() - dt1.getTime()) / 1000;\n    diff /= (60 * 60);\n    return Math.abs(Math.round(diff));\n\n}\n\n\nexport default DashboardTable;\n","import React from 'react';\nimport './App.css';\nimport {ListGroup, ListGroupItem} from \"reactstrap\";\n\n\nfunction AssigneePanelBar(props) {\n\n    let assignees = new Set(props?.claimsData?.claims.map(claim => claim.assignedTo)).add(\"All\");\n    return (\n        <div>\n            <h6>Assignee Panel</h6>\n        <ListGroup>\n            {Array.from(assignees).map(assignee =>\n                <ListGroupItem tag=\"button\" action onClick={() => props.onClick(assignee)}>{assignee}</ListGroupItem>)}\n        </ListGroup>\n        </div>\n    );\n}\n\nexport default AssigneePanelBar;\n","import React from 'react';\nimport './App.css';\n\nimport DashboardTable from \"./DashboardTable\";\nimport AssigneePanelBar from \"./AssigneePanelBar\";\n\nclass Dashboard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleAssigneeSelect = this.handleAssigneeSelect.bind(this);\n        this.state = {\n            claimsData: {\n                \"slas\": [{\n                    \"status\": \"received\",\n                    \"hours\": 48\n                },\n                    {\n                        \"status\": \"awaiting_action\",\n                        \"hours\": 72\n                    }\n                ],\n                \"claims\": [{\n                    \"id\": 1,\n                    \"claimant\": \"Skylar Dean\",\n                    \"assignedTo\": \"John Smith\",\n                    \"status\": \"received\",\n                    \"createdAt\": \"2020-08-09T00:00:00.000Z\",\n                    \"updatedAt\": \"2020-08-09T00:00:00.000Z\"\n                },\n                    {\n                        \"id\": 2,\n                        \"claimant\": \"Amber Green\",\n                        \"assignedTo\": \"John Smith\",\n                        \"status\": \"awaiting_action\",\n                        \"createdAt\": \"2020-08-12T00:00:00.000Z\",\n                        \"updatedAt\": \"2020-08-13T00:00:00.000Z\"\n                    },\n                    {\n                        \"id\": 3,\n                        \"claimant\": \"Ross James\",\n                        \"assignedTo\": \"John Smith\",\n                        \"status\": \"received\",\n                        \"createdAt\": \"2020-08-05T00:00:00.000Z\",\n                        \"updatedAt\": \"2020-08-05T00:00:00.000Z\"\n                    },\n                    {\n                        \"id\": 4,\n                        \"claimant\": \"Kim Jones\",\n                        \"assignedTo\": \"John Smith\",\n                        \"status\": \"awaiting_action\",\n                        \"createdAt\": \"2020-08-15T00:00:00.000Z\",\n                        \"updatedAt\": \"2020-08-15T00:00:00.000Z\"\n                    },\n                    {\n                        \"id\": 5,\n                        \"claimant\": \"Henry Wong\",\n                        \"assignedTo\": \"Michael Pool\",\n                        \"status\": \"received\",\n                        \"createdAt\": \"2020-08-18T00:00:00.000Z\",\n                        \"updatedAt\": \"2020-08-18T00:00:00.000Z\"\n                    },\n                    {\n                        \"id\": 6,\n                        \"claimant\": \"James Lee\",\n                        \"assignedTo\": \"Michael Pool\",\n                        \"status\": \"awaiting_action\",\n                        \"createdAt\": \"2020-08-10T00:00:00.000Z\",\n                        \"updatedAt\": \"2020-08-13T00:00:00.000Z\"\n                    },\n                    {\n                        \"id\": 7,\n                        \"claimant\": \"Skylar Dean\",\n                        \"assignedTo\": \"John Smith\",\n                        \"status\": \"received\",\n                        \"createdAt\": \"2020-08-01T00:00:00.000Z\",\n                        \"updatedAt\": \"2020-08-03T00:00:00.000Z\"\n                    },\n                    {\n                        \"id\": 8,\n                        \"claimant\": \"Amber Green\",\n                        \"assignedTo\": \"Michael Pool\",\n                        \"status\": \"rejected\",\n                        \"createdAt\": \"2020-08-02T00:00:00.000Z\",\n                        \"updatedAt\": \"2020-08-02T00:00:00.000Z\"\n                    },\n                    {\n                        \"id\": 9,\n                        \"claimant\": \"Amber Green\",\n                        \"assignedTo\": \"John Pool\",\n                        \"status\": \"rejected\",\n                        \"createdAt\": \"2020-08-02T00:00:00.000Z\",\n                        \"updatedAt\": \"2020-08-02T00:00:00.000Z\"\n                    },\n                    {\n                        \"id\": 10,\n                        \"claimant\": \"Skylar Dean\",\n                        \"assignedTo\": \"Paul Smith\",\n                        \"status\": \"received\",\n                        \"createdAt\": \"2020-08-01T00:00:00.000Z\",\n                        \"updatedAt\": \"2020-08-03T00:00:00.000Z\"\n                    },\n                ]\n            },\n            assigneeSelected: 'All'\n        };\n    }\n\n    handleAssigneeSelect(assignee) {\n        console.log(assignee);\n        this.setState({assigneeSelected: assignee});\n    }\n\n    render() {\n        const assignee = this.state.assigneeSelected;\n        const claims = this.state.claimsData;\n        return (\n            <div className=\"panels\">\n                <div className=\"panel-assignee\">\n                    <AssigneePanelBar onClick={this.handleAssigneeSelect} claimsData={claims}/>\n                </div>\n                <div className=\"panel-table\">\n                    <DashboardTable claimsData={claims} assigneeSelected={{assignee}}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Dashboard;\n","import React from 'react';\nimport './App.css';\nimport Dashboard from \"./Dashboard\";\n\nfunction App() {\n  return (\n      <body>\n      <Dashboard />\n      </body>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}